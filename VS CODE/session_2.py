# -*- coding: utf-8 -*-
"""Session 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t7Nh1EuiONca6w9TM82wBGNvxpPvYIRz
"""

num = 234234

def numReverse(num):
  rev = 0
  while num > 0:
    rem = num%10
    rev = rev*10 + rem
    num//= 10
  return rev


num = 1234
sum = 0
c = 0
while num %10 > 0:
  r = num %10
  sum = r + sum
  num//=10
  c+=1
print(f"sum is : {sum}")
print(f"count is : {c}")

#Check Armstrong Number
num = 1634

reserve = num
res2 = num
r = 0
sum = 0
cube = 0
length = 0

#finding length
while res2 %10 >0:
  r = res2 %10
  res2 //=10
  length +=1

#funding sum of cube of all digits
while num %10 > 0:
  r = num %10
  sum = r+ sum
  num//=10
  cube = cube + r**length

#check for armstring number
if cube == reserve:
  print(True)
else:
  print(False)

#check palindrome
num = 121
num = str(num)
rev = num[::-1]

if num == rev:
  print("palindrome")
else:
  print("Not a Palindrome")

num = 10

for i in range(num +1):
  for j in range(1, num +1):
    if j <= i:
      print(j, end = " ")
  print("")

num = 10

for i in range(num +1):
  for j in range(1, num + 1):
    if j >= i :
      print(j - i +1 , end = " ")
  print("")

for i in range(6,1,-1):
  for j in range(1,i):
    print(j,end = " ")
  print()

for i in range(0,5):
  for j in range(5,i,-1):
    print(j, end = ' ')
  print()

for i in range (5,0,-1):
  for j in range (5,i-1,-1):
    print(j, end = " ")
  print()

num = 1
for i in range(1,6):
  for j in range (1,i+1):
    print(num, end = " ")
    num +=1
  print()

for i in range (1,6):
  for j in range (1, i+1):
    if j %2 == 0:
      print(0,end = " ")
    else:
      print(1,end = " ")
  print()

for i in range (1,6):
  for j in range (1,i+1):
    print(j%2, end = " ")
  print()

for i in range (1,6):
  for j in range (1, i+1):
    print(i%2, end = " ")
  print()

for i in range (1,6):
  print('* '*i, end = " ")
  print()

# Session Ended here...

"""# Sesson 2 : Recursion"""

def factorial(n):
  if n== 0 or n ==1:
    return 1
  return n*factorial(n-1)

factorial(2)

def fac(n):
  if n == 0 or n== 1:
    return 1
  return n*fac(n-1)

fac(5)

# power n raise to m by recursion
def pow(n,m):
  if m ==1:
    return n
  return n* pow(n,m-1)

pow(2,5)

#find lenght of digit using recursion
def cdigit(num):
  if num == 0:
    return 0
  return 1 + cdigit(num//10)

print((cdigit(12344)))

#sum of digits

def sDigit(n):
  if n == 0:
    return 0
  return sDigit(n//10) + sDigit(n//100)

sDigit(1234)

